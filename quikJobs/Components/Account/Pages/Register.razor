@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using quikJobs.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-4">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <h2>Create a new account.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="username" aria-required="true" placeholder="firstname" />
                    <label for="first_name">First Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="username" aria-required="true" placeholder="lastname" />
                    <label for="first_name">Last Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Address" class="form-control" autocomplete="street-address" aria-required="true" placeholder="address" />
                    <label for="address">Address</label>
                    <ValidationMessage For="() => Input.Address" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </EditForm>
        </div>
    </div>
</div>



@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        // Set additional properties
        user.FirstName = Input.FirstName; // Set the First Name
        user.LastName = Input.LastName;   // Set the Last Name
        user.Address = Input.Address;       // Set the Address

        var result = await UserManager.CreateAsync(user, Input.Password);

        

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            // Check for duplicate email error and customize message
            foreach (var error in result.Errors)
            {
                if (error.Code == "DuplicateUserName")
                {
                    identityErrors = new IdentityError[] { new IdentityError { Description = "This email address is already registered. Please use another one." } };
                }
            }
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        // Sign the user in directly after successful registration
        await SignInManager.SignInAsync(user, isPersistent: false);

        // Redirect the user to the return URL or home page
        RedirectManager.RedirectTo(ReturnUrl ?? "/");
    }


    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [StringLength(50, ErrorMessage = "Last name cannot be longer than 50 characters.")]
        public string LastName { get; set; } = "";

        [Required]
        [StringLength(50, ErrorMessage = "First name cannot be longer than 50 characters.")]
        public string? FirstName { get; set; } = "";

        [Required]
        [StringLength(200, ErrorMessage = "Address cannot be longer than 200 characters.")]
        public string? Address { get; set; } = "";
    }
}
