@using quikJobs.Data
@using Microsoft.AspNetCore.Identity
@using Services

@inject NavigationManager Navigation
@inject JobService _JobService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@rendermode InteractiveServer


<EditForm Model="@newJob" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="job-card">
        <div class="basic-job-card">
            <!-- Input for Job Name -->
            <label for="name">Job Name</label>
            <InputText id="name" @bind-Value="newJob.Name" class="form-control mb-1" placeholder="Please type the job name" />

            <!-- Input for Job URL -->
            <label for="url">Select an Image</label>
            <InputText id="url" @bind-Value="newJob.Url" class="form-control mb-3" placeholder="Please enter an image URL" />

            <!-- Display image based on current URL -->
            <div>
                <img src="@newJob.Url" alt="Job Image" class="job-card-img" />
            </div>

            <p class="views mt-1">Posted @GetFormattedDate(newJob.CreatedOn)</p>
            <p class="views">Views: 0</p>
        </div>

        <div>
            <label for="type">Type:</label>
            <InputSelect id="type" @bind-Value="newJob.Type" class="form-control">
                <option value="P">P (Part-time)</option>
                <option value="F">F (Full-time)</option>
                <option value="C">C (Contract)</option>
            </InputSelect>
        </div>

        <div>
            <label for="description">Description:</label>
            <InputTextArea id="description" @bind-Value="newJob.Description" class="form-control" placeholder="Please provide a job description" />
        </div>

        <div>
            <label for="pay">Pay:</label>
            <InputNumber id="pay" @bind-Value="newJob.Pay" class="form-control" placeholder="Enter the pay for the job" />
        </div>


            <div class="d-flex gap-3 mt-3">
                <!-- Submit will call handle submit-->
                <button type="submit" class="save-job-btn">Edit</button>
                <button type="button" class="save-job-btn" @onclick="DeleteJobAsync">Delete</button>
            </div>
        


    </div>
</EditForm>

@code {
    [Parameter]
    public Job newJob { get; set; }


    private async Task HandleSubmit()
    {
        var result = await _JobService.EditJobAsync(newJob);
        if (result)
        {
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }

    }

    private async Task DeleteJobAsync()
    {
        var result = await _JobService.DeleteJobAsync(newJob.JobId);
        if(result)
        {
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
    }




    private string GetFormattedDate(DateOnly? postedDate)
    {
        if (postedDate == null) return "Unknown Date";

        var dateTime = postedDate.Value.ToDateTime(new TimeOnly(0, 0));
        return dateTime.ToString("MMM d");
    }


}

