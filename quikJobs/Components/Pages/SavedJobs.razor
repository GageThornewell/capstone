@page "/savedjobs"
@attribute [Authorize]
@rendermode InteractiveServer

@using quikJobs.Data

@inject quikJobs.Services.SavedJobService _SavedJobService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>SavedJobs</PageTitle>

<h3 class="text-center">Saved Jobs</h3>

<div class="container mb-5">
    @if (jobs == null)
    {
        <p class="text-center">Loading saved jobs...</p>
        <p>If this does not load in 5 seconds please click <NavLink class="nav-link" href="savedjobs">Here</NavLink></p>
    }
    else if (jobs.Count == 0)
    {
        <p class="text-center">You have no saved jobs.</p>
    }
    else
    {
        <div class="row">
            @foreach (var job in jobs)
            {
                <div class="col-12 col-md-6 mb-4">
                    <!-- 2 items per row on medium screens and up -->
                    <div class="job-card">
                        <JobCard Job="@job" />
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Job>? jobs;

    private string? userId = "null";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        jobs = await _SavedJobService.GetJobsSavedByUserId(userId);
    }
}
